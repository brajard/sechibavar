  
/***************************************************************************
                 module classe T_coef_soil.h  -  description



Computation of cgrnd and dgrnd coefficient at the t time-step
//thermal conductivity at all levels


	YS1 = zdz1;       numerical constant (W/m2/K)	
	YS2 = zdz2;       numerical constant (W/m2/K)
	YS3 = pcapa_en;   capacity used for energy_incr calculation: snow heat capacity if snow is present in the layer; soil heat capacity otherwise. (J/K)


kpjindex - ngrnd

Parametres du modele
	so_capa_dry= 1.80e+6  ---> Dry soil Heat capacity of soils (J/m^3/K)
	so_capa_wet= 3.03e+6  ---> Wet soil Heat capacity of soils (J/m^3/K)

                             -------------------
 ***************************************************************************/

  //===========================================================================
  //                          methodes forward
  forward (YREAL wetdiag, YREAL snow, YREAL so_capa_dry, YREAL so_capa_wet, YREAL dzz1, YREAL dzz2, YREAL zz_coeff, YREAL zz_coeff1, YREAL so_capa, YREAL so_cond)
  {
	double pcapa; //volumetric vertically discretized soil heat capacity (J/K/m3)
	double pkappa;//vertically discretized soil thermal conductivity (W/K/m)
	//double zx1,zx2;//layer fraction consisting in snow and soil respectively
	//double snow_h = 0; //snow height (m)
	//double tt;
	//double tt1;

	//printf("%d(%d,%d)  %e   %e \n",Yt,Yi,Yj,dzz1,dzz2);

	/*if(snow > 0.00001)
		snow_h = snow / sn_dens;
	
	//Traitement special pour le premiere couche
	if(Yj == 0)
	{
		//if( snow_h > zz_coef[0] )
		if( snow_h > zz_coeff )
		{
			pcapa = sn_capa;
			YS3 = sn_capa;
			pkappa = sn_cond;
		}
		else if( snow_h > 0.0001) 
		{
			YS3 = sn_capa;
			//zx1 = snow_h / zz_coef[0];
			//zx2 = ( zz_coef[0] - snow_h) / zz_coef[0];
			zx1 = snow_h / zz_coeff;
			zx2 = ( zz_coeff - snow_h) / zz_coeff;
			pcapa = zx1 * sn_capa + zx2 * so_capa_wet;
			pkappa = 1 / ( zx1 / sn_cond + zx2 / so_cond_wet );
		}
		else
		{
			pcapa = so_capa * (so_capa_dry + wetdiag*(so_capa_wet - so_capa_dry));
			pkappa = so_cond * (so_cond_dry + wetdiag*(so_cond_wet - so_cond_dry));
			YS3 = so_capa * (so_capa_dry + wetdiag*(so_capa_wet - so_capa_dry));
			//pcapa = so_capa;
			//pkappa = so_cond;
			//YS3 = so_capa;
		}		
	}
	else
	{
		//if( snow_h > zz_coef[Yj] )
		if( snow_h > zz_coeff )
		{
			pcapa = sn_capa;
			pkappa = sn_cond;
			YS3 = sn_capa;
		}
		//else if( snow_h > zz_coef[Yj-1] )
		else if( snow_h > zz_coeff1 )
		{
			//zx1 = (snow_h - zz_coef[Yj-1]) / (zz_coef[Yj] - zz_coef[Yj-1]);
			//zx2 = ( zz_coef[Yj] - snow_h) / (zz_coef[Yj] - zz_coef[Yj-1]);
			zx1 = (snow_h - zz_coeff1) / (zz_coeff - zz_coeff1);
			zx2 = ( zz_coeff - snow_h) / (zz_coeff - zz_coeff1);
			pcapa = zx1 * sn_capa + zx2 * so_capa_wet;
			pkappa = 1 / ( zx1 / sn_cond + zx2 / so_cond_wet );
			YS3 = sn_capa;
		}
		else
		{
			pcapa = so_capa * (so_capa_dry + wetdiag*(so_capa_wet - so_capa_dry));
			pkappa = so_cond * (so_cond_dry + wetdiag*(so_cond_wet - so_cond_dry));
			YS3 = so_capa * (so_capa_dry + wetdiag*(so_capa_wet - so_capa_dry));
			//pcapa = so_capa;
			//pkappa = so_cond;
			//YS3 = so_capa;
		}
		
	}*/

	//pcapa = so_capa;
	//pkappa = so_cond;
	//YS3 = so_capa;
	pcapa = so_capa * (so_capa_dry + wetdiag*(so_capa_wet - so_capa_dry));
	pkappa = so_cond * (so_cond_dry + wetdiag*(so_cond_wet - so_cond_dry));
	YS3 = so_capa * (so_capa_dry + wetdiag*(so_capa_wet - so_capa_dry));

	

      	//zdz1
        if(Yj < ngrnd -1) 
	{
	  	//YS1 = dz1[Yj] * pkappa;
		YS1 = dzz1 * pkappa;
	}
	else
		YS1 = 0;
	
	//zdz2
        //YS2= pcapa * dz2[Yj]/dtradia;
	YS2= pcapa * dzz2/dtradia;

	//printf("%d,%d  so_cond %e     so_capa %e   YS1 %2.25e     YS2 %2.25e \n", Yt,Yj,so_cond, so_capa, YS1,YS2);

	//printf("%d(%d,%d) YS1 %e YS2 %e         zz_coeff %e    zz %e    dz1%e  dzz1 %e     dz2 %e  dzz2 %e \n",Yt,Yi,Yj,YS1,  YS2, zz_coeff, zz_coef[Yj], dz1[Yj] ,  dzz1 , dz2[Yj]  ,dzz2);


	

//printf("%d(%d,%d) dz1[Yj] %e  dz2[Yj] %e  so_wet %e   so_dry %e  wetdiag %e    pcapa %e    pkappa %e    YS3 %e     YS1 %e     YS2 %e \n",Yt,Yi,Yj,dz1[Yj],dz2[Yj],so_capa_wet,so_capa_dry, wetdiag, pcapa, pkappa, YS3,YS1, YS2);
        
  }
	


 //===========================================================================
  //                         methodes  backward
  backward (YREAL wetdiag, YREAL snow, YREAL so_capa_dry, YREAL so_capa_wet, YREAL dzz1, YREAL dzz2, YREAL zz_coeff, YREAL zz_coeff1, YREAL so_capa, YREAL so_cond)
  {
	double pcapa; //volumetric vertically discretized soil heat capacity (J/K/m3)
	double pkappa;//vertically discretized soil thermal conductivity (W/K/m)
	
	double d_YS1_pkappa = 0;
	double d_YS1_dzz1 = 0;
	
	double d_YS2_pcapa = 0;
	double d_YS2_dzz2 = 0;
	
	double d_pcapa_capa =0;
	double d_pcapa_dry = 0;
	double d_pcapa_wet = 0;
	double d_pcapa_diag =0;

	double d_pkapa_cond = 0;
	double d_pkapa_diag =0;


	pcapa = so_capa * (so_capa_dry + wetdiag*(so_capa_wet - so_capa_dry));
	pkappa = so_cond * (so_cond_dry + wetdiag*(so_cond_wet - so_cond_dry));
	YS3 = so_capa * (so_capa_dry + wetdiag*(so_capa_wet - so_capa_dry));

	d_pcapa_capa = so_capa_dry + wetdiag*(so_capa_wet - so_capa_dry);
	d_pcapa_dry = so_capa - wetdiag*so_capa	;
	d_pcapa_wet = wetdiag*so_capa;
	d_pcapa_diag = so_capa *(so_capa_wet - so_capa_dry);

	d_pkapa_cond = so_cond_dry + wetdiag*(so_cond_wet - so_cond_dry);
	d_pkapa_diag = so_cond *(so_cond_wet - so_cond_dry);

	YJ3I9 = so_capa_dry + wetdiag*(so_capa_wet - so_capa_dry);
	YJ3I3 = so_capa - wetdiag*so_capa;
	YJ3I4 = wetdiag*so_capa;
	YJ3I1 = so_capa *(so_capa_wet - so_capa_dry);


      	//zdz1
        if(Yj < ngrnd -1) 
	{
		d_YS1_pkappa = dzz1;
		d_YS1_dzz1 = pkappa;

		YJ1I1 = d_YS1_pkappa * d_pkapa_diag;
		YJ1I5 = d_YS1_dzz1;
		YJ1I10 = d_YS1_pkappa * d_pkapa_cond;		
	}
	else
	{
		//YS1 = 0;
		YJ1I1 =YJ1I2 =YJ1I7 =YJ1I8 =YJ1I5 = YJ1I10 = YJ1I3 = YJ1I4 =YJ1I6 =YJ1I9 =0;
	}
	//YS2= pcapa * dzz2/dtradia;
	d_YS2_pcapa = dzz2/dtradia;
	d_YS2_dzz2 = pcapa /dtradia;


	YJ2I1 = d_YS2_pcapa * d_pcapa_diag;
	YJ2I3 = d_YS2_pcapa * d_pcapa_dry;
	YJ2I4 = d_YS2_pcapa *d_pcapa_wet;
	YJ2I6 = d_YS2_dzz2 ;
	YJ2I9 = d_YS2_pcapa * d_pcapa_capa;

	
  }

  //===========================================================================

//************************** FIN DU MODULE T_coef_soil.h ********************************









